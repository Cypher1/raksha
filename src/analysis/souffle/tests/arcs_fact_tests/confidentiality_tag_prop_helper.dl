//-----------------------------------------------------------------------------
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------
#include "src/analysis/souffle/taint.dl"
#include "src/analysis/souffle/fact_test_helper.dl"

.decl expectMayHaveTag(ap: AccessPath, owner: Principal, tag: Tag)

// Ensure that the expected and actual integrity tag relations are equivalent.
.decl expectedConfTagNotPresent(ap: AccessPath, owner: Principal, tag: Tag)
expectedConfTagNotPresent(ap, owner, tag) :-
  expectMayHaveTag(ap, owner, tag), !mayHaveTag(ap, owner, tag).

.decl unexpectedConfTagPresent(ap: AccessPath, owner: Principal, tag: Tag)
unexpectedConfTagPresent(ap, owner, tag) :-
  mayHaveTag(ap, owner, tag), !expectMayHaveTag(ap, owner, tag).

.output expectedConfTagNotPresent(IO=stdout, delimiter=",")
.output unexpectedConfTagPresent(IO=stdout, delimiter=",")

// These help with debugging if the test fails.
.output hasTag(IO=stdout, delimiter=",")
.output mayHaveTag(IO=stdout, delimiter=",")

TEST_CASE("expected_conf_tag_not_present_is_empty") :- count : { expectedConfTagNotPresent(_, _, _) } = 0.
TEST_CASE("unexpected_conf_tag_present_is_empty") :- count : { unexpectedConfTagPresent(_, _, _) } = 0.
TEST_CASE("num_expected_conf_matches_num_actual_and_not_zero") :-
  count_expected = count : { expectMayHaveTag(_, _, _) },
  count_actual = count : { mayHaveTag(_, _, _) },
  count_expected != 0,
  count_actual != 0,
  count_expected = count_actual.
