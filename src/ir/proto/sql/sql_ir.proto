//-----------------------------------------------------------------------------
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//----------------------------------------------------------------------------

// This is a minimal proto targeted at the MVP integration with a Google SQL
// verifier. It's just to push a limited set of constructs across the
// language barrier.
syntax = "proto3";

package raksha.ir.proto.sql;

// This value corresponds to some source table for the query being analyzed.
// It may have some confidentiality tags or integrity tags annotated onto it.
// We entangle the tag claim aspect and the column identification because
// that fits well with the policy matching procedure in the SQL verifier.
message SourceTableColumn {
  // The fully-qualified path to the column, including table name and (if it
  // exists) schema name.
  string column_path = 1;

  // The tags that the SQL verifier statically attaches to the column. The
  // SQL verifier uses the policy it is given describing what columns have
  // what tags to decide what columns exist (or, at least, exist in its
  // model) of the input tables, so it makes a certain amount of sense to
  // entangle those here as well.
  repeated string confidentiality_tags = 2;
  repeated string integrity_tags = 3;
}
